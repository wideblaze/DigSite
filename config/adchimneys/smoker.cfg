# Configuration file

Emitter {
    # If true, the smoke will be transferred to the chimneys directly connected from aside. [default: true]
    B:canEmitAside=true

    # Defines a color in ARGB (Alpha, Red, Green, Blue) hex format (0xaarrggbb) which will be applied to the smoke.
    # The alpha channel of this color (aa) determines probability of applying (ff - always, 7f - 1/2, 00 - never).
    #  [default: 0x88808080]
    S:color=0x88808080

    # If true, the smoke particles will be generated even without connected chimney. [default: true]
    B:emitWithoutChimney=true

    # This parameter is required only for those blocks that use NBT tags to fully identify themselves.
    # The format is <tagKey>=<value>
    # If the value is a string, it must be enclosed in double quotes. Example: id="ic2:generator"
    # Leave this blank if you don't need it. [default: ]
    S:identityTag=

    # Defines the name of the NBT tag that stores info about tile entity active state.
    # Emitter is considered active if the return value is greater than 0 or true.
    # Set to an empty string if you don't need this function. [default: ]
    S:nbtControlKey=

    # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
    # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
    # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
    # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
    # Use '*' char as meta value to specify all possible values.
    # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
    # Also you may use just ore dictionary name as full id.
    #  [default: adchimneys:smoker]
    S:relatedBlockId=adchimneys:smoker

    # If true, the meta data of the dropped item will be used instead of the block state meta.
    # This is usefull when the placed block has other meta than its item. [default: false]
    B:useDroppedItemMeta=false
}


Smoke {
    # Defines particles amount [range: 0.0 ~ 16.0, default: 5.0]
    S:amount=5.0

    # Defines smoke blow out distance. [range: 0.0 ~ 4.0, default: 1.0]
    S:intencity=1.0

    # Defines smoke particles scale. [range: 1.0 ~ 2.5, default: 2.0]
    S:scale=2.0
}


smoker {
    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how many hits it takes to break the block.
    #  -1 makes the block indestructible. [range: -1.0 ~ 3.4028235E38, default: 1.5]
    S:hardness=1.5

    # Defines the block resistance to explosions. [range: 0.0 ~ 3.4028235E38, default: 30.0]
    S:resistance=30.0

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 4]
            I:amount=4

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [repeater], [comparator], [blockIron], [blockGold], [blockRedstone], [blockCoal]]
            S:components <
                repeater
                comparator
                blockIron
                blockGold
                blockRedstone
                blockCoal
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:smoker]
            S:output=adchimneys:smoker

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 314 151 626]
            S:pattern=314 151 626
        }

    }

}


