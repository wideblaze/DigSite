# Configuration file

Chimney {

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 8]
            I:amount=8

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [glowstone]]
            S:components <
                glowstone
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:glowstone]
            S:output=adchimneys:glowstone

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 101 101 101]
            S:pattern=101 101 101
        }

    }

}


Pump {

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 4]
            I:amount=4

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [adchimneys:glowstone:1], [repeater], [blockCoal]]
            S:components <
                adchimneys:glowstone:1
                repeater
                blockCoal
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:glowstone:2]
            S:output=adchimneys:glowstone:2

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 121 232 121]
            S:pattern=121 232 121
        }

    }

}


Vent {

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 4]
            I:amount=4

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [adchimneys:glowstone]]
            S:components <
                adchimneys:glowstone
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:glowstone:1]
            S:output=adchimneys:glowstone:1

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 101 000 101]
            S:pattern=101 000 101
        }

    }

}


glowstone {
    # Defines a color in ARGB (Alpha, Red, Green, Blue) hex format (0xaarrggbb) which will be applied to the smoke.
    # The alpha channel of this color (aa) determines probability of applying (ff - always, 7f - 1/2, 00 - never).
    #  [default: 0x11ffbc5e]
    S:color=0x11ffbc5e

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how many hits it takes to break the block.
    #  -1 makes the block indestructible. [range: -1.0 ~ 3.4028235E38, default: 0.3]
    S:hardness=0.3

    # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
    # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
    # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
    # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
    # Use '*' char as meta value to specify all possible values.
    # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
    # Also you may use just ore dictionary name as full id.
    #  [default: glowstone]
    S:relatedBlockId=glowstone

    # Defines the block resistance to explosions. [range: 0.0 ~ 3.4028235E38, default: 1.5]
    S:resistance=1.5
}


